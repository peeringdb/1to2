{
    "docs": [
        {
            "location": "/", 
            "text": "PeeringDB\n\n\nGetting help\n\n\n\n\n\n\nPlease log bugs and feature requests at \nGitHub\n.\n\n\n\n\n\n\nSeveral PeeringDB mailing lists are listed below.\n\n\n\n\n\n\nQuestions, comments and everything else should go to \n.\n\n\n\n\n\n\nMailing lists\n\n\nWe have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:\n\n\n\n\n\n\nPeeringDB Announce\n\n    All PeeringDB administrative information, such as upgrades,\n\n    maintenances, outages, etc.\n\n\n\n\n\n\nPeeringDB Governance\n\n    Discussion list for PeeringDB governance issues This is a\n\n    community-based effort, the community\u2019s input will help guide the\n\n    future of the PeeringDB (as it has always done).\n\n\n\n\n\n\nPeeringDB Technical\n\n    Discussion of the back end of PeeringDB \n other technical topics\n\n\n\n\n\n\nPeeringDB User-Discuss\n\n    All other list traffic.\n\n\n\n\n\n\nOur goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.\n\n\nQuick start\n\n\nPeeringDB is available at \nhttps://www.peeringdb.com/\n with self-describing API docs at \nhttps://www.peeringdb.com/apidocs/\n.  More thorough docs are at \nAPI Specs\n, but in a nutshell, just prepend the URL with \napi/\n to get that object in JSON.\n\n\nFor example:\n\n\nhttps://www.peeringdb.com/net/1\n\nbecomes:\n\n\nhttps://www.peeringdb.com/api/net/1\n\n\nList all via API by taking the \nid\n off:\n\n\nhttps://www.peeringdb.com/api/net\n\n\nLocal database replication is accomplished with this \ncommand line tool\n, please see the \ndocumentation\n for more information.\n\n\nGuides\n\n\n\n\n[es] \nGu\u00eda corta para uso de peeringdb.com\n - Fabi\u00e1n Mej\u00eda\n\n\n\n\nPresentations\n\n\n2017\n\n\n\n\nPeeringDB Update\n at \nTOP-IX Meeting\n, Torino, IT - September 26, 2017 - Bijal Sanghani\n\n\nPeeringDB Update\n at \nNPD 17\n, The Hague, NL - September 15, 2017 - Arnold Nipper\n\n\nPeeringDB Update\n at \nSAFNOG-3\n, Durban, ZA - September 6, 2017 - Arnold Nipper\n\n\nPeeringDB Update\n at \nAfPIF 2017\n, Abidjan, CI - August 24, 2017 - Arnold Nipper\n\n\nPeeringDB Update\n at \nSANOG 30\n Peering Forum, Gurgaon, IN - July 10, 2017 - Arnold Nipper\n\n\nMore benefits from PeeringDB\n at \nDE-CIX Technical Meeting\n, Frankfurt, DE - June 22, 2017 - Arnold Nipper\n\n\nPeeringDB Update\n at \nNANOG 70\n, Bellevue, WA, US - June 5, 2017 - Aaron Hughes\n\n\nPeeringDB Update\n at \nBOSNOG Meeting \n IX Peering Forum\n, Cambridge, MA, US - June 2, 2017 - Stephen McManus\n\n\nOrienta\u00e7\u00f5es no preenchimento de participantes do IX.br\n at \nGTER 43\n, Foz do Igua\u00e7u, BR - May 25, 2017 - Julimar Lunguinho Mendes\n\n\nPeeringDB Update\n at \nENOG 13.0\n, Saint Petersburg, RU - May 23, 2017 - Arnold Nipper\n\n\nPeeringDB Update\n at \nGlobal Peering Forum 12.0\n, New York, NY, US - April 26, 2017 - Aaron Huges\n\n\nPeeringDB\n at \nGORE/ESNOG Reunion 19\n, Barcelona, ES - April 6, 2017 - Arnold Nipper\n\n\nPeeringDB\n at \nCEE Peering Days 2017\n, Ljubljana, SL - March 23, 2017 - Arnold Nipper\n\n\nPeeringDB 2.0\n at \nAPRICOT 2017\n, Ho Chi Minh City, VN - February 28, 2017 - Arnold Nipper\n\n\n\n\n2016\n\n\n\n\nPeeringDB\n at \n19 KIKE Conference\n, Serock, PL - November 23, 2016 - Robert Jakub\n\n\nPeeringDB 2.0\n at \nITNOG2\n, Bologna, IT - November 3, 2016 - Arnold Nipper\n\n\nPeeringDB Product Committee Charter Survey\n at \nEPF 11\n, Sofia, BG - September 20, 2016 - Eric Loos\n\n\nPeeringDB 2.0\n at \nNPD 16\n, The Hague, NL - September 16, 2016 - Walt Wollny\n\n\nPeeringDB 2.0\n at \nAfPIF 2016\n, Dar es Salaam, TZ - August 30, 2016 - Arnold Nipper\n\n\nPeeringDB 2.0 for IXPs\n at \nAFIX 2016\n, Dar es Salaam, TZ - August 29, 2016 - Arnold Nipper\n\n\nPeeringDB 2.0\n at \nENOG 11\n, Moscow, RU - June 7, 2016 - Arnold Nipper\n\n\nPeeringDB 2.0\n at \nRIPE 72\n, Copenhagen, DK - May 25, 2016 - Greg Hankins\n\n\nPeeringDB 2.0\n at \nCHI-NOG 06\n, Chicago, IL, US - May 12, 2016 - Matt Griswold\n\n\nPeeringDB 2.0 e o Cen\u00e1rio Brasileiro\n and \nIX.br Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB\n at \nGTER 41\n, Uberl\u00e2ndia, BR - May 12, 2016 - Eduardo Ascen\u00e7o Reis\n\n\nPeeringDB 2.0 for IXPs\n at \n28th Euro-IX Forum\n, Luxembourg, LU - April 26, 2016 - Greg Hankins / Arnold Nipper\n\n\nRIPE SEE 5\n, Tirana, AL - April 19, 2016 - Arnold Nipper\n\n\nPeeringDB 2.0\n at \nUKNOF34\n, Manchester, UK - April 21, 2016 - Greg Hankins\n\n\nPeeringDB Update\n at \nGPF 11\n, Los Angeles, CA, US - April 13, 2016 - Aaron Hughes\n\n\nNetNod\n, Stockholm, SE - March 17, 2016 - Job Snijders\n\n\nDKNOG6\n, Copenhagen, DK - March 10, 2016 - Job Snijders\n\n\nPeeringDB Update\n - Aaron Hughes\n\n\nAPRICOT 2016\n, Auckland, NZ - February 23, 2016 - Aaron Hughes\n\n\nNANOG 66\n, San Diego, CA, US - February 10, 2016 - Aaron Hughes\n\n\n\n\n\n\nPeeringDB Version 2 Coding Introduction\n at \nNANOG 66\n, San Diego, CA, US - February 8, 2016 - Matt Griswold\n\n\n\n\n2015\n\n\n\n\nPeeringDB Version 2 Brazil\n - Matt Griswold / Greg Hankins\n\n\nIX (PTT) F\u00f3rum 9\n, S\u00e3o Paulo, BR - December 8, 2015 - Greg Hankins\n\n\n\n\n\n\nPeeringDB Version 2 Introduction\n - Matt Griswold\n\n\n27th Euro-IX Forum\n, Berlin, DE - October 26, 2015 - Greg Hankins\n\n\nDENOG7\n, Darmstadt, DE - October 30, 2015 - Arnold Nipper \n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\n\ndjango-peeringdb\n is a Django library with a local PeeringDB database sync.  It defines the database schema to create a local database copy.  The library is easy to integrate into a common framework for local tools and custom interfaces, and also supports multiple database engines (MySQL, Postgres, SQLite).\n\n\n\n\n\n\nIxgen\n is yet another open source, multiplatform peering configuration generator that is based on the PeeringDB API.  It can also run its own server for faster results.  Ixgen is configured using an INI- or JSON-style format, and produces custom template-driven or fixed JSON-style configurations,\n\n\n\n\n\n\npeeringdb-py\n is a Python client for PeeringDB.  It features functions to get objects and display them in JSON or YAML format, and provides a whois-like display of records.  The client also has an integrated local database sync, and provides a Python library for integration with custom tools.  \nSome examples\n are available too.\n\n\n\n\n\n\nPinder\n is a tool that facilitates peering.  If peering is desired between two networks, and you're happy to just configure sessions without a commercial agreement, Pinder acts as the middle man.  You can submit the request via either a basic web UI or an API, and the other network is notified or can periodically check their outstanding requests.  If both network agree to peer, they are notified to configure a session.  Once both networks indicate that sessions are configured and established, the request is then deleted. \nA brief slide deck\n explains the functionality in more detail.\n\n\n\n\n\n\nTraceMON\n is a tool for visualizing a network topology generated by traceroutes that provides one-click access to IXP and network information.  It also displays PeeringDB information and allows the user to update their record.  RIPE Atlas users can access it by selecting a \ntraceroute measurement\n and clicking on the TraceMON tab.\n\n\n\n\n\n\nBeta development\n\n\n\n\n\n\nThe \nPeeringDB beta server\n is running the latest beta software version, with full access over HTTP and the API.  Note that changes made to the beta database are local to the beta server only, and are not reflected on the production servers.\n\n\n\n\n\n\nThe \nlatest changes to PeeringDB\n automagically redirects to the list of issues on PeeringDB's GitHub repository that document all of the changes in the current beta version.\n\n\n\n\n\n\nHistorical data\n\n\n\n\nThe PeeringDB 1.0 MySQL interface is gone.  The last available MySQL dump is archived at \nhttps://www.peeringdb.com/v1/final_export.sql\n.\n\n\nMySQL dumps from July, 29 2010 to March 14, 2016 are archived by CAIDA at \nhttp://data.caida.org/datasets/peeringdb-v1/\n.\n\n\n\n\nHow you can help\n\n\n\n\n\n\nCheck your entries and make sure everything looks correct\n\n\n\n\n\n\nPort any scripts to the new API\n\n\n\n\n\n\nSend us feedback\n\n\n\n\n\n\nImprove these docs\n\n\n\n\n\n\nThanks for your feedback, we look forward to hearing from you!", 
            "title": "PeeringDB"
        }, 
        {
            "location": "/#peeringdb", 
            "text": "", 
            "title": "PeeringDB"
        }, 
        {
            "location": "/#getting-help", 
            "text": "Please log bugs and feature requests at  GitHub .    Several PeeringDB mailing lists are listed below.    Questions, comments and everything else should go to  .", 
            "title": "Getting help"
        }, 
        {
            "location": "/#mailing-lists", 
            "text": "We have changed the way in which PeeringDB will be announcing future enhancements, changes, maintenance windows, and other information. If you would like to be notified of certain events, or participate in certain discussions, please subscribe to one of the following email lists:    PeeringDB Announce \n    All PeeringDB administrative information, such as upgrades, \n    maintenances, outages, etc.    PeeringDB Governance \n    Discussion list for PeeringDB governance issues This is a \n    community-based effort, the community\u2019s input will help guide the \n    future of the PeeringDB (as it has always done).    PeeringDB Technical \n    Discussion of the back end of PeeringDB   other technical topics    PeeringDB User-Discuss \n    All other list traffic.    Our goal is to give you all the information you want, and no more.  Please subscribe to any of these lists you feel are appropriate, or none. You will still be able to use the database even if you are not subscribed to any lists.", 
            "title": "Mailing lists"
        }, 
        {
            "location": "/#quick-start", 
            "text": "PeeringDB is available at  https://www.peeringdb.com/  with self-describing API docs at  https://www.peeringdb.com/apidocs/ .  More thorough docs are at  API Specs , but in a nutshell, just prepend the URL with  api/  to get that object in JSON.  For example:  https://www.peeringdb.com/net/1 \nbecomes:  https://www.peeringdb.com/api/net/1  List all via API by taking the  id  off:  https://www.peeringdb.com/api/net  Local database replication is accomplished with this  command line tool , please see the  documentation  for more information.", 
            "title": "Quick start"
        }, 
        {
            "location": "/#guides", 
            "text": "[es]  Gu\u00eda corta para uso de peeringdb.com  - Fabi\u00e1n Mej\u00eda", 
            "title": "Guides"
        }, 
        {
            "location": "/#presentations", 
            "text": "", 
            "title": "Presentations"
        }, 
        {
            "location": "/#2017", 
            "text": "PeeringDB Update  at  TOP-IX Meeting , Torino, IT - September 26, 2017 - Bijal Sanghani  PeeringDB Update  at  NPD 17 , The Hague, NL - September 15, 2017 - Arnold Nipper  PeeringDB Update  at  SAFNOG-3 , Durban, ZA - September 6, 2017 - Arnold Nipper  PeeringDB Update  at  AfPIF 2017 , Abidjan, CI - August 24, 2017 - Arnold Nipper  PeeringDB Update  at  SANOG 30  Peering Forum, Gurgaon, IN - July 10, 2017 - Arnold Nipper  More benefits from PeeringDB  at  DE-CIX Technical Meeting , Frankfurt, DE - June 22, 2017 - Arnold Nipper  PeeringDB Update  at  NANOG 70 , Bellevue, WA, US - June 5, 2017 - Aaron Hughes  PeeringDB Update  at  BOSNOG Meeting   IX Peering Forum , Cambridge, MA, US - June 2, 2017 - Stephen McManus  Orienta\u00e7\u00f5es no preenchimento de participantes do IX.br  at  GTER 43 , Foz do Igua\u00e7u, BR - May 25, 2017 - Julimar Lunguinho Mendes  PeeringDB Update  at  ENOG 13.0 , Saint Petersburg, RU - May 23, 2017 - Arnold Nipper  PeeringDB Update  at  Global Peering Forum 12.0 , New York, NY, US - April 26, 2017 - Aaron Huges  PeeringDB  at  GORE/ESNOG Reunion 19 , Barcelona, ES - April 6, 2017 - Arnold Nipper  PeeringDB  at  CEE Peering Days 2017 , Ljubljana, SL - March 23, 2017 - Arnold Nipper  PeeringDB 2.0  at  APRICOT 2017 , Ho Chi Minh City, VN - February 28, 2017 - Arnold Nipper", 
            "title": "2017"
        }, 
        {
            "location": "/#2016", 
            "text": "PeeringDB  at  19 KIKE Conference , Serock, PL - November 23, 2016 - Robert Jakub  PeeringDB 2.0  at  ITNOG2 , Bologna, IT - November 3, 2016 - Arnold Nipper  PeeringDB Product Committee Charter Survey  at  EPF 11 , Sofia, BG - September 20, 2016 - Eric Loos  PeeringDB 2.0  at  NPD 16 , The Hague, NL - September 16, 2016 - Walt Wollny  PeeringDB 2.0  at  AfPIF 2016 , Dar es Salaam, TZ - August 30, 2016 - Arnold Nipper  PeeringDB 2.0 for IXPs  at  AFIX 2016 , Dar es Salaam, TZ - August 29, 2016 - Arnold Nipper  PeeringDB 2.0  at  ENOG 11 , Moscow, RU - June 7, 2016 - Arnold Nipper  PeeringDB 2.0  at  RIPE 72 , Copenhagen, DK - May 25, 2016 - Greg Hankins  PeeringDB 2.0  at  CHI-NOG 06 , Chicago, IL, US - May 12, 2016 - Matt Griswold  PeeringDB 2.0 e o Cen\u00e1rio Brasileiro  and  IX.br Guia de cadastro de informa\u00e7\u00f5es de ASNs no PeeringDB  at  GTER 41 , Uberl\u00e2ndia, BR - May 12, 2016 - Eduardo Ascen\u00e7o Reis  PeeringDB 2.0 for IXPs  at  28th Euro-IX Forum , Luxembourg, LU - April 26, 2016 - Greg Hankins / Arnold Nipper  RIPE SEE 5 , Tirana, AL - April 19, 2016 - Arnold Nipper  PeeringDB 2.0  at  UKNOF34 , Manchester, UK - April 21, 2016 - Greg Hankins  PeeringDB Update  at  GPF 11 , Los Angeles, CA, US - April 13, 2016 - Aaron Hughes  NetNod , Stockholm, SE - March 17, 2016 - Job Snijders  DKNOG6 , Copenhagen, DK - March 10, 2016 - Job Snijders  PeeringDB Update  - Aaron Hughes  APRICOT 2016 , Auckland, NZ - February 23, 2016 - Aaron Hughes  NANOG 66 , San Diego, CA, US - February 10, 2016 - Aaron Hughes    PeeringDB Version 2 Coding Introduction  at  NANOG 66 , San Diego, CA, US - February 8, 2016 - Matt Griswold", 
            "title": "2016"
        }, 
        {
            "location": "/#2015", 
            "text": "PeeringDB Version 2 Brazil  - Matt Griswold / Greg Hankins  IX (PTT) F\u00f3rum 9 , S\u00e3o Paulo, BR - December 8, 2015 - Greg Hankins    PeeringDB Version 2 Introduction  - Matt Griswold  27th Euro-IX Forum , Berlin, DE - October 26, 2015 - Greg Hankins  DENOG7 , Darmstadt, DE - October 30, 2015 - Arnold Nipper", 
            "title": "2015"
        }, 
        {
            "location": "/#tools", 
            "text": "django-peeringdb  is a Django library with a local PeeringDB database sync.  It defines the database schema to create a local database copy.  The library is easy to integrate into a common framework for local tools and custom interfaces, and also supports multiple database engines (MySQL, Postgres, SQLite).    Ixgen  is yet another open source, multiplatform peering configuration generator that is based on the PeeringDB API.  It can also run its own server for faster results.  Ixgen is configured using an INI- or JSON-style format, and produces custom template-driven or fixed JSON-style configurations,    peeringdb-py  is a Python client for PeeringDB.  It features functions to get objects and display them in JSON or YAML format, and provides a whois-like display of records.  The client also has an integrated local database sync, and provides a Python library for integration with custom tools.   Some examples  are available too.    Pinder  is a tool that facilitates peering.  If peering is desired between two networks, and you're happy to just configure sessions without a commercial agreement, Pinder acts as the middle man.  You can submit the request via either a basic web UI or an API, and the other network is notified or can periodically check their outstanding requests.  If both network agree to peer, they are notified to configure a session.  Once both networks indicate that sessions are configured and established, the request is then deleted.  A brief slide deck  explains the functionality in more detail.    TraceMON  is a tool for visualizing a network topology generated by traceroutes that provides one-click access to IXP and network information.  It also displays PeeringDB information and allows the user to update their record.  RIPE Atlas users can access it by selecting a  traceroute measurement  and clicking on the TraceMON tab.", 
            "title": "Tools"
        }, 
        {
            "location": "/#beta-development", 
            "text": "The  PeeringDB beta server  is running the latest beta software version, with full access over HTTP and the API.  Note that changes made to the beta database are local to the beta server only, and are not reflected on the production servers.    The  latest changes to PeeringDB  automagically redirects to the list of issues on PeeringDB's GitHub repository that document all of the changes in the current beta version.", 
            "title": "Beta development"
        }, 
        {
            "location": "/#historical-data", 
            "text": "The PeeringDB 1.0 MySQL interface is gone.  The last available MySQL dump is archived at  https://www.peeringdb.com/v1/final_export.sql .  MySQL dumps from July, 29 2010 to March 14, 2016 are archived by CAIDA at  http://data.caida.org/datasets/peeringdb-v1/ .", 
            "title": "Historical data"
        }, 
        {
            "location": "/#how-you-can-help", 
            "text": "Check your entries and make sure everything looks correct    Port any scripts to the new API    Send us feedback    Improve these docs    Thanks for your feedback, we look forward to hearing from you!", 
            "title": "How you can help"
        }, 
        {
            "location": "/gov/", 
            "text": "PeeringDB Governance\n\n\nMission Statement\n\n\nPeeringDB, a nonprofit member-based organization, facilitates the exchange of user maintained interconnection related information, primarily for Peering Coordinators and Internet Exchange, Facility, and Network Operators.\n\n\nMember Meetings\n\n\n\n\nApril 20th, 2017: \nAgenda\n - \nMinutes\n - \nAudio\n\n\nApril 21st, 2016: \nAgenda\n - \nMinutes\n - \nAudio\n\n\n\n\nStrategic Plan \n Organizational Objectives\n\n\n\n\n2017-2018 \nDRAFT\n\n\n\n\nBoard Meetings\n\n\n\n\nSeptember 20th, 2017\n\n\nJuly 7th, 2017\n\n\nMay 18th, 2017\n\n\nFebruary 9th, 2017\n\n\nJanuary 13th, 2017\n\n\nDecember 2nd, 2016\n\n\nSeptember 22nd, 2016\n\n\nAugust 10th, 2016\n\n\nJuly 1st, 2016\n\n\nMay 18th, 2016\n\n\nApril 6th, 2016\n\n\nMarch 4th, 2016\n\n\nFebruary 4th, 2016\n\n\nJanuary 7th, 2016\n\n\nDecember 8th, 2015\n\n\n\n\nFinances\n\n\n\n\nMay 10th, 2017: IRS Form 990-EZ for 2016\n\n\nDecember 31st, 2016: Finance Report\n\n\nApril 15th, 2016: IRS Form W-9\n\n\nFebruary 24th, 2016: IRS 501(c)(6) Exemption Letter\n\n\nFebruary 23rd, 2016: IRS Form 990-N for 2014\n\n\nFebruary 18th, 2016: IRS Form 990-N for 2015\n\n\nJanuary 7th, 2016: IRS 501(c)(6) Application\n\n\nDecember 31st, 2015: Finance Report\n\n\nDecember 31st, 2014: Finance Report\n\n\n\n\nOrganizational Documents\n\n\n\n\nMay 18th, 2017: Financial Controls Policy\n\n\nDecember 1st, 2016: Annual Report\n\n\nMay 18th, 2016: Amended Annual Report\n\n\nDecember 16th, 2015: Certificate and Articles of Incorporation\n\n\nDecember 8th, 2015: Organizational Consent\n\n\nDecember 8th, 2015: Bylaws\n\n\nDecember 8th, 2015: Conflict of Interest Policy\n\n\n\n\nSurveys \n Elections\n\n\n\n\nApril 30th, 2017: Board election results\n\n\nApril 14th, 2017: Board election voter's guide\n\n\nApril 30th, 2016: Board election results\n\n\nApril 14th, 2016: Board election voter's guide\n\n\nDecember 1st, 2015: Board election results\n\n\nNovember 14th, 2015: Board election voter's guide\n\n\nOctober 20th, 2015: Announcement of survey results and Board election plan\n\n\nAugust, 2015: Survey for future of PeeringDB\n\n\n\n\nPolicies\n\n\n\n\nPrivacy Policy\n\n\n\n\nBoard of Directors\n\n\n\n\nSeat 1 (term expires 2019): \nBijal Sanghani\n, 2017-\n\n\nSeat 2 (term expires 2018): \nAaron Hughes\n, 2015-\n\n\nSeat 3 (term expires 2019): \nArnold Nipper\n, 2015-\n\n\nSeat 4 (term expires 2018): \nJob Snijders\n, 2015-\n\n\nSeat 5 (term expires 2019): \nPatrick W. Gilmore\n, 2015-\n\n\n\n\nOfficers\n\n\n\n\nAaron Hughes\n, President, 2015-\n\n\nJob Snijders\n, Vice President, 2016-\n\n\nChris Caputo\n, Secretary \n Treasurer, 2015-\n\n\n\n\nAdmin Committee\n\n\n\n\nPurpose is to oversee the administrator mission and volunteers.\n\n\nBoard members Nipper (Chair), Sanghani (Vice Chair), Gilmore, and Snijders.\n\n\nInterested in volunteering? Contact \nadmincom@lists.peeringdb.com\n.\n\n\n\n\nOperations Committee\n\n\n\n\nBoard members Snijders (Chair) and Hughes.\n\n\n\n\nProduct Committee\n\n\n\n\nPlease see the \nProduct Committee\n page.\n\n\n\n\nAlumni\n\n\n\n\nMatt Griswold, Director, 2015-2017\n\n\nPatrick W. Gilmore, Vice President, 2015-2016", 
            "title": "Governance"
        }, 
        {
            "location": "/gov/#peeringdb-governance", 
            "text": "", 
            "title": "PeeringDB Governance"
        }, 
        {
            "location": "/gov/#mission-statement", 
            "text": "PeeringDB, a nonprofit member-based organization, facilitates the exchange of user maintained interconnection related information, primarily for Peering Coordinators and Internet Exchange, Facility, and Network Operators.", 
            "title": "Mission Statement"
        }, 
        {
            "location": "/gov/#member-meetings", 
            "text": "April 20th, 2017:  Agenda  -  Minutes  -  Audio  April 21st, 2016:  Agenda  -  Minutes  -  Audio", 
            "title": "Member Meetings"
        }, 
        {
            "location": "/gov/#strategic-plan-organizational-objectives", 
            "text": "2017-2018  DRAFT", 
            "title": "Strategic Plan &amp; Organizational Objectives"
        }, 
        {
            "location": "/gov/#board-meetings", 
            "text": "September 20th, 2017  July 7th, 2017  May 18th, 2017  February 9th, 2017  January 13th, 2017  December 2nd, 2016  September 22nd, 2016  August 10th, 2016  July 1st, 2016  May 18th, 2016  April 6th, 2016  March 4th, 2016  February 4th, 2016  January 7th, 2016  December 8th, 2015", 
            "title": "Board Meetings"
        }, 
        {
            "location": "/gov/#finances", 
            "text": "May 10th, 2017: IRS Form 990-EZ for 2016  December 31st, 2016: Finance Report  April 15th, 2016: IRS Form W-9  February 24th, 2016: IRS 501(c)(6) Exemption Letter  February 23rd, 2016: IRS Form 990-N for 2014  February 18th, 2016: IRS Form 990-N for 2015  January 7th, 2016: IRS 501(c)(6) Application  December 31st, 2015: Finance Report  December 31st, 2014: Finance Report", 
            "title": "Finances"
        }, 
        {
            "location": "/gov/#organizational-documents", 
            "text": "May 18th, 2017: Financial Controls Policy  December 1st, 2016: Annual Report  May 18th, 2016: Amended Annual Report  December 16th, 2015: Certificate and Articles of Incorporation  December 8th, 2015: Organizational Consent  December 8th, 2015: Bylaws  December 8th, 2015: Conflict of Interest Policy", 
            "title": "Organizational Documents"
        }, 
        {
            "location": "/gov/#surveys-elections", 
            "text": "April 30th, 2017: Board election results  April 14th, 2017: Board election voter's guide  April 30th, 2016: Board election results  April 14th, 2016: Board election voter's guide  December 1st, 2015: Board election results  November 14th, 2015: Board election voter's guide  October 20th, 2015: Announcement of survey results and Board election plan  August, 2015: Survey for future of PeeringDB", 
            "title": "Surveys &amp; Elections"
        }, 
        {
            "location": "/gov/#policies", 
            "text": "Privacy Policy", 
            "title": "Policies"
        }, 
        {
            "location": "/gov/#board-of-directors", 
            "text": "Seat 1 (term expires 2019):  Bijal Sanghani , 2017-  Seat 2 (term expires 2018):  Aaron Hughes , 2015-  Seat 3 (term expires 2019):  Arnold Nipper , 2015-  Seat 4 (term expires 2018):  Job Snijders , 2015-  Seat 5 (term expires 2019):  Patrick W. Gilmore , 2015-", 
            "title": "Board of Directors"
        }, 
        {
            "location": "/gov/#officers", 
            "text": "Aaron Hughes , President, 2015-  Job Snijders , Vice President, 2016-  Chris Caputo , Secretary   Treasurer, 2015-", 
            "title": "Officers"
        }, 
        {
            "location": "/gov/#admin-committee", 
            "text": "Purpose is to oversee the administrator mission and volunteers.  Board members Nipper (Chair), Sanghani (Vice Chair), Gilmore, and Snijders.  Interested in volunteering? Contact  admincom@lists.peeringdb.com .", 
            "title": "Admin Committee"
        }, 
        {
            "location": "/gov/#operations-committee", 
            "text": "Board members Snijders (Chair) and Hughes.", 
            "title": "Operations Committee"
        }, 
        {
            "location": "/gov/#product-committee", 
            "text": "Please see the  Product Committee  page.", 
            "title": "Product Committee"
        }, 
        {
            "location": "/gov/#alumni", 
            "text": "Matt Griswold, Director, 2015-2017  Patrick W. Gilmore, Vice President, 2015-2016", 
            "title": "Alumni"
        }, 
        {
            "location": "/committee/product/", 
            "text": "PeeringDB Product Committee\n\n\n\n\nPurpose is to study and recommend feature needs.\n\n\nInterested in volunteering? Contact \nproductcom@lists.peeringdb.com\n.\n\n\n\n\n\n\nProduct Committee Charter\n\n\n Approved by Board July 7th, 2017 \n\n\nScope\n\n\nThe PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community.\n\n\nOut of Scope\n\n\n\n\nThe PC does not drive PeeringDB improvements related to the administrative interfaces \n functions used by the PeeringDB Admin Committee.\n\n\nThe PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure.\n\n\n\n\nDeliverables\n\n\n\n\nGather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives.\n\n\nFormulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list.\n\n\nDocument and maintain workflow process to handle requests and issues.\n\n\nMaintain the product roadmap and feature request backlog and makes them publicly accessible. \n\n\nCreate and maintain PeeringDB product documentation and presentation materials.\n\n\nDevelop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality.\n\n\nPropose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders.\n\n\n\n\nCollaboration\n\n\nThe PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.\n\n\nParticipation\n\n\nThe PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice chair by simple majority vote. The Board may add or remove members at any time it deems necessary.\n\n\nCommunication\n\n\n\n\nQuestions and suggestions for the Product Committee can be sent to \n\n\nKey development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist \npdb-gov@lists.peeringdb.com\n\n\nAll issues and the product roadmap and feature backlog can be found at \nhttps://github.com/peeringdb/peeringdb/issues\n\n\n\n\nDecision Policy\n\n\nProduct Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair.\n\n\n\n\nWorkflow\n\n\nDiagram of Workflow\n\n\nThe development roadmap is tracked using GitHub issues located at \nhttps://github.com/peeringdb/peeringdb/issues\n with the \nZenHub\n overlay.\n\n\nNew Issues\n are evaluated to confirm they are legitimate, which may require asking the reporter for feedback. Issues that cannot be reproduced or where the solution is unclear are moved to \nReview\n. Moving from \nNew Issues\n to \nBacklog\n does not need much discussion as it is easy to move the issue back or mark it as \nwontfix\n later.\n\n\nOnce an issue is determined to be valid and coherent with the product vision, it is moved to \nBacklog\n and labeled as either bug or enhancement. If the issue is considered not to be coherent with the product vision, it will be marked as \nwontfix\n; the requester always has the option to forward his issue to the PeeringDB board if she disagrees with the assessment by the Product Committee.\n\nIf an issue is labeled as a bug, the severity will determine how it will be resolved. P1/P2 bugs are considered service impacting and will be treated by the software vendor under the maintenance agreement, P3/P4 bugs will be treated as product enhancement requests.\n\n\nOnce Product Committee, with developer involvement, decides that no more information is needed to be able to fix/implement an issue, it can move to \nPC Candidates\n, with a rough estimate. \nPC Candidates\n should be ordered with more important higher in the list.\n\n\nDepending on the effort required to implement the issue, development will be done either on project basis or as part of the maintenance agreement. The Product Committee follows a budget release process to fund project based development efforts. Developments that fall within the budget envelope allocated to the Product Committee require no further approval by the board, however 75% of the Product Committee members must agree. \n\n\nSprint\n is the column that is next in the pipeline, encompassing everything that is approved to work on, so development starts immediately. This would be decided by the Product Committee.\n\n\nAll other PeeringDB projects also go through this issue board to decide on priority. For example, when something for peeringdb-py goes into a sprint, an issue will be made on the peeringdb-py project and accessed by the main board.\n\n\nDone\n means the issue is completed in development and will be pushed to beta for review. Issues are not \nClosed\n until they are deployed to production\n\n\nMeeting Notes\n\n\n\n\nMarch 21st, 2017: Meeting Notes\n\n\nApril 13th, 2017: Meeting Notes\n\n\nJune 1st, 2017: Meeting Notes\n\n\nJuly 6th, 2017: Meeting Notes\n\n\nAugust 3rd, 2017: Meeting Notes\n\n\n\n\nMembers\n\n\n\n\nEric Loos (Chair)\n\n\nMatt Griswold (Vice Chair)\n\n\nKarthik Arumugham\n\n\nGreg Hankins\n\n\nAaron Hughes\n\n\nMartin J. Levy\n\n\nStephen McManus\n\n\nArnold Nipper\n\n\nChris Phillips\n\n\nKay Rechthien\n\n\nBijal Sanghani\n\n\nJob Snijders", 
            "title": "Product Committee"
        }, 
        {
            "location": "/committee/product/#peeringdb-product-committee", 
            "text": "Purpose is to study and recommend feature needs.  Interested in volunteering? Contact  productcom@lists.peeringdb.com .", 
            "title": "PeeringDB Product Committee"
        }, 
        {
            "location": "/committee/product/#product-committee-charter", 
            "text": "Approved by Board July 7th, 2017", 
            "title": "Product Committee Charter"
        }, 
        {
            "location": "/committee/product/#scope", 
            "text": "The PeeringDB Product Committee (PC) is charged with steering the future product development and running the market outreach efforts to continuously improve the value that PeeringDB delivers to the networks registered with PeeringDB, and the broader community.", 
            "title": "Scope"
        }, 
        {
            "location": "/committee/product/#out-of-scope", 
            "text": "The PC does not drive PeeringDB improvements related to the administrative interfaces   functions used by the PeeringDB Admin Committee.  The PC does not consider PeeringDB improvements related to the server, storage, hosting or network infrastructure.", 
            "title": "Out of Scope"
        }, 
        {
            "location": "/committee/product/#deliverables", 
            "text": "Gather inputs from stakeholders regarding the evolution of PeeringDB in terms of product features and overall long term objectives.  Formulate the long term objectives and validate them with the PeeringDB Board and the members of the PeeringDB Governance mailing list.  Document and maintain workflow process to handle requests and issues.  Maintain the product roadmap and feature request backlog and makes them publicly accessible.   Create and maintain PeeringDB product documentation and presentation materials.  Develop market outreach and evangelisation to increase the uptake of PeeringDB use and improve data quality.  Propose new features or enhancements based on the long term objectives and validates significant product evolutions with key stakeholders.", 
            "title": "Deliverables"
        }, 
        {
            "location": "/committee/product/#collaboration", 
            "text": "The PC shall work with other PeeringDB committees to ensure an equitable division of development resources in recognition of the volunteer efforts that are ensuring the daily operations.", 
            "title": "Collaboration"
        }, 
        {
            "location": "/committee/product/#participation", 
            "text": "The PeeringDB Product Committee members serve a 2 years renewable term, potential volunteers may submit their candidacy to the PeeringDB Board. The product committee will select their own Chair and Vice chair by simple majority vote. The Board may add or remove members at any time it deems necessary.", 
            "title": "Participation"
        }, 
        {
            "location": "/committee/product/#communication", 
            "text": "Questions and suggestions for the Product Committee can be sent to   Key development communication and community input gathering efforts will be conducted via the PeeringDB Governance Mailinglist  pdb-gov@lists.peeringdb.com  All issues and the product roadmap and feature backlog can be found at  https://github.com/peeringdb/peeringdb/issues", 
            "title": "Communication"
        }, 
        {
            "location": "/committee/product/#decision-policy", 
            "text": "Product Committee members will decide by simple majority vote on contested issues called by the Product Committee Chair.", 
            "title": "Decision Policy"
        }, 
        {
            "location": "/committee/product/#workflow", 
            "text": "Diagram of Workflow  The development roadmap is tracked using GitHub issues located at  https://github.com/peeringdb/peeringdb/issues  with the  ZenHub  overlay.  New Issues  are evaluated to confirm they are legitimate, which may require asking the reporter for feedback. Issues that cannot be reproduced or where the solution is unclear are moved to  Review . Moving from  New Issues  to  Backlog  does not need much discussion as it is easy to move the issue back or mark it as  wontfix  later.  Once an issue is determined to be valid and coherent with the product vision, it is moved to  Backlog  and labeled as either bug or enhancement. If the issue is considered not to be coherent with the product vision, it will be marked as  wontfix ; the requester always has the option to forward his issue to the PeeringDB board if she disagrees with the assessment by the Product Committee. \nIf an issue is labeled as a bug, the severity will determine how it will be resolved. P1/P2 bugs are considered service impacting and will be treated by the software vendor under the maintenance agreement, P3/P4 bugs will be treated as product enhancement requests.  Once Product Committee, with developer involvement, decides that no more information is needed to be able to fix/implement an issue, it can move to  PC Candidates , with a rough estimate.  PC Candidates  should be ordered with more important higher in the list.  Depending on the effort required to implement the issue, development will be done either on project basis or as part of the maintenance agreement. The Product Committee follows a budget release process to fund project based development efforts. Developments that fall within the budget envelope allocated to the Product Committee require no further approval by the board, however 75% of the Product Committee members must agree.   Sprint  is the column that is next in the pipeline, encompassing everything that is approved to work on, so development starts immediately. This would be decided by the Product Committee.  All other PeeringDB projects also go through this issue board to decide on priority. For example, when something for peeringdb-py goes into a sprint, an issue will be made on the peeringdb-py project and accessed by the main board.  Done  means the issue is completed in development and will be pushed to beta for review. Issues are not  Closed  until they are deployed to production", 
            "title": "Workflow"
        }, 
        {
            "location": "/committee/product/#meeting-notes", 
            "text": "March 21st, 2017: Meeting Notes  April 13th, 2017: Meeting Notes  June 1st, 2017: Meeting Notes  July 6th, 2017: Meeting Notes  August 3rd, 2017: Meeting Notes", 
            "title": "Meeting Notes"
        }, 
        {
            "location": "/committee/product/#members", 
            "text": "Eric Loos (Chair)  Matt Griswold (Vice Chair)  Karthik Arumugham  Greg Hankins  Aaron Hughes  Martin J. Levy  Stephen McManus  Arnold Nipper  Chris Phillips  Kay Rechthien  Bijal Sanghani  Job Snijders", 
            "title": "Members"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nGeneral\n\n\nWhat is the PeeringDB?\n\n\nIt's a database for peering and peering related information. PeeringDB will let you see information about Networks you might want to peer with, where and how you can peer with them, as well as publish information about your own Organization's peering information.\n\n\nHow do I get started?\n\n\nSee our Quick Start guide: \nhttp://docs.peeringdb.com/#quick-start\n\n\nTechnical\n\n\nHow do I query by ASN?\n\n\nYou may type in the ASN in the search box, or for web:\n\n\nhttp://as42.peeringdb.com\n\n\nhttps://peeringdb.com/net?asn=42\n\n\nFor API:\n\n\nhttps://peeringdb.com/api/net?asn=42\n\n\nUsing /asn used to work, what happened?\n\n\nPlease see \nhttp://lists.peeringdb.com/pipermail/pdb-announce/2016-March/000036.html\n for details.\n\n\nHow do the new permissions work?\n\n\nNow there is an \norg\n entity which owns the records.  A record can be a facility, an exchange point, or a network.  Users are added to the org entity and can then be given access to any facility, any network, any exchange point, or anything the org itself owns.\n\n\nAuthenticating via embedded user/pass in the URL\n\n\nSupport for this depends on the client and some browsers have stopped supporting embedded\n\nauthentication in the URL\n\n\nSo for example \n\n\nhttps://\nusername\n:\npassword\n@peeringdb.com/api/net/1\n\n\n\nmay work or it may not depending on the browser you are using.\n\n\nWhy are dates represented as strings in the API?\n\n\nDate strings are ISO 8601 to keep a standard format. Comparison operations such as \n__gt\n, \n__lt\n, etc all still work as expected. For fetching records against updated timestamp, you may also use \n?since=\nseconds since epoch\n\n\nHow do I sync the whole database to my local machine?\n\n\nYou may make a full local copy with \nhttps://github.com/peeringdb/peeringdb-py\n, see docs at \nhttp://peeringdb.github.io/peeringdb-py/cli/\n\n\nInitially it will perform full sync, then it will only do an incremental sync (only updates records that have changed), so you're free to run it as often as you want.\n\n\nWhen syncing to MySQL I get 'Illegal mix of collations'\n\n\nSuch as:\n\n\ndjango.db.utils.OperationalError: (1267, \"Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='\")\n\n\n\nWe will fix that when time allows, for the time being, just run:\n\n\nalter database peeringdb default character set utf8 default collate utf8_unicode_ci;\n\n\n\nGovernance/Membership\n\n\nHow does one become a PeeringDB member?\n\n\nYour organization does not need to be a Member to have an active account at PeeringDB.com, but Membership is available to those that do. Per the Bylaws, Membership is determined by having an active PeeringDB.com account, and a subscription to the \npdb-gov\n mailing list.\n\n\nWhat are the Terms and Conditions for PeeringDB membership?\n\n\nPlease see \nhttp://docs.peeringdb.com/gov/#organizational-documents\n for the legal aspects of PeeringDB. An Acceptable Use Policy is under development by the Board. \n\n\nAre there any membership fees required for members?\n\n\nNo, there are no membership fees required. The organization welcomes sponsorships as its method of financial support. Please see \nhttps://www.peeringdb.com/sponsors\n for more information on supporting the PeeringDB.\n\n\nAre there any liabilities imposed on members?\n\n\nNo, there are not.\n\n\nTo register network information in the PeeringDB, is an organization required to join as a member?\n\n\nNo, that isn't necessary.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#general", 
            "text": "", 
            "title": "General"
        }, 
        {
            "location": "/faq/#what-is-the-peeringdb", 
            "text": "It's a database for peering and peering related information. PeeringDB will let you see information about Networks you might want to peer with, where and how you can peer with them, as well as publish information about your own Organization's peering information.", 
            "title": "What is the PeeringDB?"
        }, 
        {
            "location": "/faq/#how-do-i-get-started", 
            "text": "See our Quick Start guide:  http://docs.peeringdb.com/#quick-start", 
            "title": "How do I get started?"
        }, 
        {
            "location": "/faq/#technical", 
            "text": "", 
            "title": "Technical"
        }, 
        {
            "location": "/faq/#how-do-i-query-by-asn", 
            "text": "You may type in the ASN in the search box, or for web:  http://as42.peeringdb.com  https://peeringdb.com/net?asn=42  For API:  https://peeringdb.com/api/net?asn=42", 
            "title": "How do I query by ASN?"
        }, 
        {
            "location": "/faq/#using-asn-used-to-work-what-happened", 
            "text": "Please see  http://lists.peeringdb.com/pipermail/pdb-announce/2016-March/000036.html  for details.", 
            "title": "Using /asn used to work, what happened?"
        }, 
        {
            "location": "/faq/#how-do-the-new-permissions-work", 
            "text": "Now there is an  org  entity which owns the records.  A record can be a facility, an exchange point, or a network.  Users are added to the org entity and can then be given access to any facility, any network, any exchange point, or anything the org itself owns.", 
            "title": "How do the new permissions work?"
        }, 
        {
            "location": "/faq/#authenticating-via-embedded-userpass-in-the-url", 
            "text": "Support for this depends on the client and some browsers have stopped supporting embedded \nauthentication in the URL  So for example   https:// username : password @peeringdb.com/api/net/1  may work or it may not depending on the browser you are using.", 
            "title": "Authenticating via embedded user/pass in the URL"
        }, 
        {
            "location": "/faq/#why-are-dates-represented-as-strings-in-the-api", 
            "text": "Date strings are ISO 8601 to keep a standard format. Comparison operations such as  __gt ,  __lt , etc all still work as expected. For fetching records against updated timestamp, you may also use  ?since= seconds since epoch", 
            "title": "Why are dates represented as strings in the API?"
        }, 
        {
            "location": "/faq/#how-do-i-sync-the-whole-database-to-my-local-machine", 
            "text": "You may make a full local copy with  https://github.com/peeringdb/peeringdb-py , see docs at  http://peeringdb.github.io/peeringdb-py/cli/  Initially it will perform full sync, then it will only do an incremental sync (only updates records that have changed), so you're free to run it as often as you want.", 
            "title": "How do I sync the whole database to my local machine?"
        }, 
        {
            "location": "/faq/#when-syncing-to-mysql-i-get-illegal-mix-of-collations", 
            "text": "Such as:  django.db.utils.OperationalError: (1267, \"Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='\")  We will fix that when time allows, for the time being, just run:  alter database peeringdb default character set utf8 default collate utf8_unicode_ci;", 
            "title": "When syncing to MySQL I get 'Illegal mix of collations'"
        }, 
        {
            "location": "/faq/#governancemembership", 
            "text": "", 
            "title": "Governance/Membership"
        }, 
        {
            "location": "/faq/#how-does-one-become-a-peeringdb-member", 
            "text": "Your organization does not need to be a Member to have an active account at PeeringDB.com, but Membership is available to those that do. Per the Bylaws, Membership is determined by having an active PeeringDB.com account, and a subscription to the  pdb-gov  mailing list.", 
            "title": "How does one become a PeeringDB member?"
        }, 
        {
            "location": "/faq/#what-are-the-terms-and-conditions-for-peeringdb-membership", 
            "text": "Please see  http://docs.peeringdb.com/gov/#organizational-documents  for the legal aspects of PeeringDB. An Acceptable Use Policy is under development by the Board.", 
            "title": "What are the Terms and Conditions for PeeringDB membership?"
        }, 
        {
            "location": "/faq/#are-there-any-membership-fees-required-for-members", 
            "text": "No, there are no membership fees required. The organization welcomes sponsorships as its method of financial support. Please see  https://www.peeringdb.com/sponsors  for more information on supporting the PeeringDB.", 
            "title": "Are there any membership fees required for members?"
        }, 
        {
            "location": "/faq/#are-there-any-liabilities-imposed-on-members", 
            "text": "No, there are not.", 
            "title": "Are there any liabilities imposed on members?"
        }, 
        {
            "location": "/faq/#to-register-network-information-in-the-peeringdb-is-an-organization-required-to-join-as-a-member", 
            "text": "No, that isn't necessary.", 
            "title": "To register network information in the PeeringDB, is an organization required to join as a member?"
        }, 
        {
            "location": "/api_specs/", 
            "text": "RESTful API Endpoints and Specifications\n\n\nObject types and tags\n\n\nEach object has an associated short hand tag you can use, current available tags are listed at \nhttps://peeringdb.com/apidocs/\n.\n\n\nRequests\n\n\nURL\n\n\n\n\n\n\nThe URL base appended with \n/api/\n, append with object type and optionally object primary key\n\n\nObject type is not case sensitive.\n\n\nFor example:\n\n\n\n\nhttps://peeringdb.com/api/\nOBJ\n/\nid\n\n\n\n\n\n\n\n\nEncoding\n\n\n\n\n\n\nTo specify the output format, either use the \nAccept:\n HTTP header\n\n\nAccept: application/json\n\n\n\nOr use extension \ntype\n\n\nhttps://peeringdb.com/api/network/42.json\n\n\n\n\n\nJSON\n\n\n\n\nall returns fit into object:\n\n\n{\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}\n\n\n\n\n\nmeta are optional\n\n\ndata always array \n\n\n\n\n\n\nNote\n\n\nPlease let us know what serializers you'd like to see\n\n\n\n\n\n\n\n\nAuthentication\n\n\n\n\nBasic HTTP authorization\n\n\n\n\nIn order to access the API as a guest simply omit any authentication\n\n\nOperations\n\n\nGET: multiple objects\n\n\nendpoint: GET /api/\nOBJ\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\nlimit \nint\n limits rows in the result set\n\n\nskip \nint\n skips n rows in the result set\n\n\ndepth \nint\n nested sets will be loaded (slow)\n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\nsince \nint\n retrieve all objects updated since specified time (unix timestamp, seconds)\n\n\n[field_name] \nint|string\n queries for fields with matching value\n\n\n\n\n\n\nreturns\n\n\narray of objects\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ\n\n\n\ncurl:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (API endpoint /net)\n\n\nNote: unlike GET single, 'depth' here will \nONLY\n expand sets, no single relationships will be expanded - this is by design\n\n\nDepth\n\n\n\n\n0: don't expand anything (default)\n\n\n1: expand all first level sets to ids\n\n\n2: expand all first level sets to objects\n\n\n\n\ncurl:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ?depth=2\n\n\n\nQuerying examples\n\n\nexact:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ?name=something\n\n\n\nmodifier:\n\n\ncurl -X GET https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ?name__contains=something\n\n\n\nQuerying modifiers\n\n\nnumeric fields:\n\n\n\n\n__lt, less than\n\n\n__lte, less than equal\n\n\n__gt, greater than\n\n\n__gte, greater than equal\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nstring fields:\n\n\n\n\n__contains, field value contains this value\n\n\n__startswith, field value starts with this value\n\n\n__in, value inside set of values (comma separated)\n\n\n\n\nSince\n\n\nYou can use the since argument with a unix timestamp (seconds) to retrieve all\n\nobjects updated since then. Note that this result will contain objects that were\n\ndeleted in that time frame as well - you can spot them by checking for status \"deleted\"\n\n\n?since=1443414678\n\n\n\nGET: single object\n\n\nendpoint: GET /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\noptional URL parameters\n\n\n\n\n\n\n\n\ndepth \nint\n nested sets and objects will be expanded \n\n\nfields \nstr\n comma separated list of field names - only matching fields will be returned in the data\n\n\n\n\n\n\nreturns\n\n\nsingle object in an array\n\n\n\n\nHTTP:\n\n\nGET /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X GET https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ/42\n\n\n\nNested data\n\n\nAny field ending in the suffix \n_set\n is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.\n\n\nThe naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API\n\n\nobject_type\n_set\n\n\n\nSo a set called 'net_set' will hold Network objects (API endpoint /net)\n\n\nNote: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.\n\n\nunexpanded:\n\n\n{ \n  ...\n  \"net_id\" : 1\n}\n\n\n\nexpanded:\n\n\n{\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}\n\n\n\nDepth\n\n\n\n\n0: don't expand anything (default)\n\n\n1 to 4: expand all sets and related objects according to level of depth specified\n\n\n\n\nPOST: create new object\n\n\nendpoint: POST /api/\nOBJ\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ\n\n\n\nPUT: edit object\n\n\nendpoint: PUT /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\nfields to post in either JSON obj \"{}\" or urlencoded field=value\n\n\n\n\n\n\n\n\nHTTP:\n\n\nPUT /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ/42\n\n\n\nDELETE: delete object\n\n\nendpoint: DELETE /api/\nOBJ\n/\nid\n\n\n\n\nrequired URL parameters\n\n\n\n\n\n\nid \nint\n\n\n\n\n\n\n\n\nHTTP:\n\n\nDELETE /api/OBJ/42\n\n\n\ncurl:\n\n\ncurl -H \"Accept: application/json\" -X DELETE https://\nusername\n:\npassword\n@peeringdb.com/api/OBJ/42", 
            "title": "API Specs"
        }, 
        {
            "location": "/api_specs/#restful-api-endpoints-and-specifications", 
            "text": "", 
            "title": "RESTful API Endpoints and Specifications"
        }, 
        {
            "location": "/api_specs/#object-types-and-tags", 
            "text": "Each object has an associated short hand tag you can use, current available tags are listed at  https://peeringdb.com/apidocs/ .", 
            "title": "Object types and tags"
        }, 
        {
            "location": "/api_specs/#requests", 
            "text": "", 
            "title": "Requests"
        }, 
        {
            "location": "/api_specs/#url", 
            "text": "The URL base appended with  /api/ , append with object type and optionally object primary key  Object type is not case sensitive.  For example:   https://peeringdb.com/api/ OBJ / id", 
            "title": "URL"
        }, 
        {
            "location": "/api_specs/#encoding", 
            "text": "To specify the output format, either use the  Accept:  HTTP header  Accept: application/json  Or use extension  type  https://peeringdb.com/api/network/42.json   JSON   all returns fit into object:  {\nmeta:\n  {\n  status:\n  message:\n  }\ndata:\n  [\n  {},\n  {}\n  ]\n}   meta are optional  data always array     Note  Please let us know what serializers you'd like to see", 
            "title": "Encoding"
        }, 
        {
            "location": "/api_specs/#authentication", 
            "text": "Basic HTTP authorization   In order to access the API as a guest simply omit any authentication", 
            "title": "Authentication"
        }, 
        {
            "location": "/api_specs/#operations", 
            "text": "", 
            "title": "Operations"
        }, 
        {
            "location": "/api_specs/#get-multiple-objects", 
            "text": "endpoint: GET /api/ OBJ   optional URL parameters    limit  int  limits rows in the result set  skip  int  skips n rows in the result set  depth  int  nested sets will be loaded (slow)  fields  str  comma separated list of field names - only matching fields will be returned in the data  since  int  retrieve all objects updated since specified time (unix timestamp, seconds)  [field_name]  int|string  queries for fields with matching value    returns  array of objects   HTTP:  GET /api/OBJ  curl:  curl -X GET https:// username : password @peeringdb.com/api/OBJ", 
            "title": "GET: multiple objects"
        }, 
        {
            "location": "/api_specs/#nested-data", 
            "text": "Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (API endpoint /net)  Note: unlike GET single, 'depth' here will  ONLY  expand sets, no single relationships will be expanded - this is by design", 
            "title": "Nested data"
        }, 
        {
            "location": "/api_specs/#depth", 
            "text": "0: don't expand anything (default)  1: expand all first level sets to ids  2: expand all first level sets to objects   curl:  curl -X GET https:// username : password @peeringdb.com/api/OBJ?depth=2", 
            "title": "Depth"
        }, 
        {
            "location": "/api_specs/#querying-examples", 
            "text": "exact:  curl -X GET https:// username : password @peeringdb.com/api/OBJ?name=something  modifier:  curl -X GET https:// username : password @peeringdb.com/api/OBJ?name__contains=something", 
            "title": "Querying examples"
        }, 
        {
            "location": "/api_specs/#querying-modifiers", 
            "text": "numeric fields:   __lt, less than  __lte, less than equal  __gt, greater than  __gte, greater than equal  __in, value inside set of values (comma separated)   string fields:   __contains, field value contains this value  __startswith, field value starts with this value  __in, value inside set of values (comma separated)", 
            "title": "Querying modifiers"
        }, 
        {
            "location": "/api_specs/#since", 
            "text": "You can use the since argument with a unix timestamp (seconds) to retrieve all \nobjects updated since then. Note that this result will contain objects that were \ndeleted in that time frame as well - you can spot them by checking for status \"deleted\"  ?since=1443414678", 
            "title": "Since"
        }, 
        {
            "location": "/api_specs/#get-single-object", 
            "text": "endpoint: GET /api/ OBJ / id   required URL parameters     id  int    optional URL parameters     depth  int  nested sets and objects will be expanded   fields  str  comma separated list of field names - only matching fields will be returned in the data    returns  single object in an array   HTTP:  GET /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X GET https:// username : password @peeringdb.com/api/OBJ/42", 
            "title": "GET: single object"
        }, 
        {
            "location": "/api_specs/#nested-data_1", 
            "text": "Any field ending in the suffix  _set  is a list of objects in a relationship with the parent object, you can expand those lists with the 'depth' parameter as explained below.  The naming schema of the field will always tell you which type of object the set is holding and will correspond with the object's endpoint on the API  object_type _set  So a set called 'net_set' will hold Network objects (API endpoint /net)  Note: unlike GET multiple, 'depth' here will also expand single relationship in addition to sets. So 'net_id' would get expanded into a network object.  unexpanded:  { \n  ...\n  \"net_id\" : 1\n}  expanded:  {\n  ...\n  \"net_id\" : 1\n  \"net\" : {\n     ... network object ...\n  }\n}", 
            "title": "Nested data"
        }, 
        {
            "location": "/api_specs/#depth_1", 
            "text": "0: don't expand anything (default)  1 to 4: expand all sets and related objects according to level of depth specified", 
            "title": "Depth"
        }, 
        {
            "location": "/api_specs/#post-create-new-object", 
            "text": "endpoint: POST /api/ OBJ   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     curl:  curl  -H \"Accept: application/json\" -X POST --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ", 
            "title": "POST: create new object"
        }, 
        {
            "location": "/api_specs/#put-edit-object", 
            "text": "endpoint: PUT /api/ OBJ / id   required URL parameters    id  int  fields to post in either JSON obj \"{}\" or urlencoded field=value     HTTP:  PUT /api/OBJ/42  curl:  curl  -H \"Accept: application/json\" -X PUT --data \"{\\\"\"state\"\\\":\\\"active\\\"}\" https:// username : password @peeringdb.com/api/OBJ/42", 
            "title": "PUT: edit object"
        }, 
        {
            "location": "/api_specs/#delete-delete-object", 
            "text": "endpoint: DELETE /api/ OBJ / id   required URL parameters    id  int     HTTP:  DELETE /api/OBJ/42  curl:  curl -H \"Accept: application/json\" -X DELETE https:// username : password @peeringdb.com/api/OBJ/42", 
            "title": "DELETE: delete object"
        }
    ]
}